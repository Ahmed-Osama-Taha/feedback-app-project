trigger: none

pool:
  name: self-hosted-local

variables:
  - group: "AWS Credential"

parameters:
  - name: environment
    type: string
    default: dev
    values:
      - dev
      - stagging
      - prod 
 


 
stages:
  - stage: CI
    displayName: CI Stage
    jobs:
      - job: Lint
        displayName: Linting Backend
        steps:
          - checkout: self
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
              addToPath: true    # Prepends the retrieved Python version to the PATH environment variable to make it available in subsequent tasks or scripts without using the output variable.
          - script: |
              python3.9 -m venv .venv
              source .venv/bin/activate
              python3.9 get-pip.py 
              pip install pylint flake8 black isort 
              pylint src/feedback_backend/app.py           # Lint with Pylint (checks for code quality and style issues (rates the code out of 10))
              flake8 src/feedback_backend/app.py           # Check PEP 8 and complexity with Flake8 (Ensures code follows Python style guide)
              black src/feedback_backend/app.py            # Auto-format code with Black and isort 
              isort src/feedback_backend/app.py
            displayName: "Run Linting"  
            workingDirectory: $(Build.SourcesDirectory)
            
      - job: Test
        dependsOn: Lint
        displayName: Run unit tests with coverage
        steps:
          - checkout: self
          - script: |
             python3.9 -m venv .venv
             source .venv/bin/activate
             pip install -r src/feedback_backend/requirements.txt
             pip install coverage pytest flask-testing
             export PYTHONPATH=$(Build.SourcesDirectory)/src
             coverage run -m pytest tests/
             coverage xml
            displayName: Run unit tests with coverage 
            workingDirectory: $(Build.SourcesDirectory)   

      - job: SonarQube            
        dependsOn: Test
        displayName: Check Code Quality Using SonarQube
        steps:
          - checkout: self 

          - task: SonarCloudPrepare@3
            inputs:
              SonarCloud: 'SonarQube credential'  # Make sure this is a real SonarCloud service connection
              organization: 'ahmedosamataha2'
              scannerMode: 'CLI'
              configMode: 'manual'
              cliProjectKey: 'ahmedosamataha2_Ahmeds-first-project'
              cliProjectName: 'FeedBack-App'
              cliSources: 'src/feedback_backend'
              extraProperties: |
                sonar.projectVersion=1.0
                sonar.sourceEncoding=UTF-8
            
                sonar.python.version=3.9
                sonar.tests=tests
                sonar.test.inclusions=tests/**/*.py
                sonar.exclusions=**/__pycache__/**,**/*.pyc,**/migrations/**
                sonar.coverage.exclusions=**/tests/**,**/__init__.py
                sonar.python.coverage.reportPaths=coverage.xml

                sonar.verbose=true

          - task: SonarCloudAnalyze@3
            inputs:
              jdkversion: 'JAVA_HOME_17_X64'
          - task: SonarCloudPublish@3
            inputs:
              pollingTimeoutSec: '300'

      - job: Build       
        dependsOn: SonarQube
        displayName: Build and Push Docker Images
        steps:
          - checkout: self
          - task: Docker@2
            displayName: Build and Push Backend Image
            inputs:
              containerRegistry: 'Docker Registry'
              repository: 'ahmedosamataha/feedback_backend'
              command: 'buildAndPush'
              Dockerfile: 'src/feedback_backend/Dockerfile'
              tags: $(Build.BuildId)
              buildContext: $(Build.SourcesDirectory)/src/feedback_backend

          - task: Docker@2
            displayName: Build and Push frontend Image
            inputs:
              containerRegistry: 'Docker Registry'
              repository: 'ahmedosamataha/feedback_frontend'
              command: 'buildAndPush'
              Dockerfile: 'src/feedback_frontend/src/Dockerfile'
              tags: $(Build.BuildId)
              buildContext: '$(Build.SourcesDirectory)'

  - stage: CD
    dependsOn: CI
    displayName: CD Stage
    jobs:
      - job: CD
        displayName: Deploy to EKS
        steps:
          - checkout: self 
          - ${{ if eq(parameters.environment, 'dev') }}:
            - script: |
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                aws configure set aws_session_token $AWS_SESSION_TOKEN

                sed -i "s|image: ahmedosamataha/feedback_backend.*|image: ahmedosamataha/feedback_backend:$(Build.BuildId)|" k8s/backend-deployment.yaml
                sed -i "s|image: ahmedosamataha/feedback_frontend.*|image: ahmedosamataha/feedback_frontend:$(Build.BuildId)|" k8s/frontend-deployment.yaml
                
                aws eks update-kubeconfig --name ahmed-feedback-app-eks --region us-east-1
                
                kubectl apply -f $(Build.SourcesDirectory)/k8s/  -n ${{ parameters.environment }}
              displayName: Deploy app to the Dev environment  
              workingDirectory: $(Build.SourcesDirectory)